{"version":3,"file":"static/js/631.10a54864.chunk.js","mappings":"sQAyEA,UAhEiB,WACf,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAiCA,OA/BAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,mCAAG,uFAEfR,EAFe,wDAInBM,GAAW,GAJQ,kBAOQG,EAAAA,EAAAA,IAAA,UAAaC,EAAAA,EAAb,iBAA6BV,EAA7B,2BAA+D,CAClFW,QAAS,CACLC,cAAc,UAAD,OAAYC,EAAAA,GACzBC,OAAQ,sBAVD,UAaS,KANlBC,EAPS,QAaFC,OAbE,sBAcTC,EAAAA,GAAAA,MAAA,eAdS,OAiBfb,EAAgBW,EAASG,MAjBV,kDAoBfD,EAAAA,GAAAA,MAAY,KAAME,SApBH,yBAsBfb,GAAW,GAtBI,6EAAH,qDA0BpBE,GAEH,GAAE,CAACR,KAGF,yBACoB,OAAjBG,IAED,4BAEE,eAAIiB,UAAWC,EAAAA,EAAAA,YAAf,SACGlB,EAAamB,KACbC,MAAM,EAAG,IACTC,KAAI,SAAAC,GACH,OAAO,gBAAmBL,UAAWC,EAAAA,EAAAA,UAA9B,WACL,gBAAKD,UAAWC,EAAAA,EAAAA,aAAqBK,IAAG,yCAAoCD,EAAME,cAAgBC,IAAKH,EAAMI,QAC7G,wBAAKJ,EAAMI,QACX,uBAAIJ,EAAMK,cAHIL,EAAMM,GAKvB,MAKF1B,IAAW,SAAC,IAAD,KAEZ,SAAC,KAAD,CAAgB2B,UAAW,IAAMC,MAAM,aAI9C,C","sources":["pages/CastPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { API_URL, API_KEY } from \"API/API\";\nimport axios from \"axios\";\nimport Loader from \"components/Loader/Loader\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport styles from 'pages/Styles.module.css'\n\nconst CastPage = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n      const fetchMovieData = async () => {\n\n          if(!movieId) return;\n\n          setLoading(true);\n\n          try {\n              const response = await axios.get(`${API_URL}movie/${movieId}/credits?language=en-US`, {\n                  headers: {\n                      Authorization: `Bearer ${API_KEY}`,\n                      accept: 'application/json',\n                  },\n              });\n              if (response.length === 0) {\n              throw toast.error(`No results.`);\n              }\n\n              setMovieDetails(response.data);\n\n          } catch(error) {\n              toast.error(error.message);\n          } finally {\n              setLoading(false);\n          }\n      };\n\n      fetchMovieData();\n\n  }, [movieId]);\n  \n  return (\n    <div>\n      {movieDetails !== null &&\n\n      <div>\n\n        <ul className={styles.actors_list}>\n          {movieDetails.cast\n          .slice(0, 10)\n          .map(actor => {\n            return <li key={actor.id} className={styles.list_item}>\n              <img className={styles.movie_poster} src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`} alt={actor.name} />\n              <h3>{actor.name}</h3>\n              <p>{actor.character}</p>\n            </li>\n          })}\n\n        </ul>\n\n\n        {loading && <Loader />}\n\n        <ToastContainer autoClose={5000} theme=\"dark\"/>\n      </div>}\n    </div>\n  )\n}\n\nexport default CastPage;\n"],"names":["movieId","useParams","useState","movieDetails","setMovieDetails","loading","setLoading","useEffect","fetchMovieData","axios","API_URL","headers","Authorization","API_KEY","accept","response","length","toast","data","message","className","styles","cast","slice","map","actor","src","profile_path","alt","name","character","id","autoClose","theme"],"sourceRoot":""}