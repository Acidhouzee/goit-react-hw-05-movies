{"version":3,"file":"static/js/642.dc9e6e27.chunk.js","mappings":"sQAwEA,UA/DoB,WAClB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4CE,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAiCA,OA/BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,uFAEfR,EAFe,wDAInBM,GAAW,GAJQ,kBAOQG,EAAAA,EAAAA,IAAA,UAAaC,EAAAA,EAAb,iBAA6BV,EAA7B,YAAgD,CACnEW,QAAS,CACLC,cAAc,UAAD,OAAYC,EAAAA,GACzBC,OAAQ,sBAVD,UAaS,KANlBC,EAPS,QAaFC,OAbE,sBAcTC,EAAAA,GAAAA,MAAA,eAdS,OAiBfb,EAAkBW,EAASG,MAjBZ,kDAoBfD,EAAAA,GAAAA,MAAY,KAAME,SApBH,yBAsBfb,GAAW,GAtBI,6EAAH,qDA0BpBE,GAED,GAAE,CAACR,KAGF,yBACsB,OAAnBG,IACC,2BACuC,IAAlCA,EAAeiB,QAAQJ,QACpB,uBAAG,oDAEH,eAAIK,UAAWC,EAAAA,EAAAA,aAAf,SACKnB,EAAeiB,QACfG,KAAI,SAAAC,GACD,OAAO,gBAAoBH,UAAWC,EAAAA,EAAAA,UAA/B,WACP,wBAAKE,EAAOC,UACZ,uBAAID,EAAOE,YAFKF,EAAOG,GAI1B,MAIRtB,IAAW,SAAC,IAAD,KAEZ,SAAC,KAAD,CAAgBuB,UAAW,IAAMC,MAAM,aAKlD,C","sources":["pages/ReviewsPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { API_URL, API_KEY } from \"API/API\";\nimport axios from \"axios\";\nimport Loader from \"components/Loader/Loader\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport styles from 'pages/Styles.module.css'\n\nconst ReviewsPage = () => {\n  const { movieId } = useParams();\n  const [reviewsDetails, setReviewsDetails] = useState(null);\n  const [loading, setLoading] = useState(false);  \n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n\n        if(!movieId) return;\n\n        setLoading(true);\n\n        try {\n            const response = await axios.get(`${API_URL}movie/${movieId}/reviews`, {\n                headers: {\n                    Authorization: `Bearer ${API_KEY}`,\n                    accept: 'application/json',\n                },\n            });\n            if (response.length === 0) {\n            throw toast.error(`No results.`);\n            }\n\n            setReviewsDetails(response.data);\n\n        } catch(error) {\n            toast.error(error.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    fetchMovieData();\n\n  }, [movieId]);\n  \n  return (\n    <div>\n      {reviewsDetails !== null &&\n        <div>\n            {reviewsDetails.results.length === 0 ? (\n                <p>There are no reviews available for this movie.</p>\n            ) : (\n                <ul className={styles.reviews_list}>\n                    {reviewsDetails.results\n                    .map(review => {\n                        return <li key={review.id} className={styles.list_item}>\n                        <h3>{review.author}</h3>\n                        <p>{review.content}</p>\n                        </li>\n                    })}\n                </ul>\n            )}\n\n            {loading && <Loader />}\n\n            <ToastContainer autoClose={5000} theme=\"dark\"/>\n        </div>\n      }   \n    </div>\n  )\n}\n\nexport default ReviewsPage;\n"],"names":["movieId","useParams","useState","reviewsDetails","setReviewsDetails","loading","setLoading","useEffect","fetchMovieData","axios","API_URL","headers","Authorization","API_KEY","accept","response","length","toast","data","message","results","className","styles","map","review","author","content","id","autoClose","theme"],"sourceRoot":""}